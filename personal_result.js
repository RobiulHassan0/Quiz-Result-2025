// ‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßã‡¶™‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
let quizData = null;

// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function loadQuizData() {
    return fetch('quizData.json')
        .then(response => response.json())
        .then(data => {
            quizData = data;
            console.log("Quiz Data loaded successfully.");
        })
        .catch(error => {
            console.error('Error loading the quiz data:', error);
        });
}

// ‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá‡¶á ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ
loadQuizData();


function fetchPersonalResult() {
    // ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç
    const headerMap = {
        "Timestamp": "‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º",
        "Email Address": "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏",
        "Score": "‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞",
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ",
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ": "‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ",
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ö‡¶≤ ‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞": "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
    };

    const participantId = document.getElementById('participantId').value.trim(); 
    const personalContainer = document.getElementById('personal-data-container');

    if (!participantId || typeof SHEET_ID === 'undefined' || typeof API_KEY === 'undefined' || !quizData) {
        const msg = !quizData ? '‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§' : '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
        personalContainer.innerHTML = `<p style="color: orange;">${msg}</p>`;
        return;
    }

    personalContainer.innerHTML = '<p>‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>';
    
    // Google Sheets API ‡¶è‡¶∞ URL
    const encodedRange = encodeURIComponent(SHEET_NAME) + '!' + API_RANGE;
    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${encodedRange}?key=${API_KEY}`;
    
    fetch(url)
        .then(response => {
            if (!response.ok) {
                if (response.status === 403) {
                     throw new Error(`HTTP Error! Status: 403. ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API Key ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ì Google Sheet-‡¶è‡¶∞ ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`);
                }
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const allRows = data.values;
            if (!allRows || allRows.length <= 1) {
                personalContainer.innerHTML = "<p>‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§</p>";
                return;
            }
            
            const header = allRows[0];
            const nameColumnIndex = 3;
            const phoneColumnIndex = 5; 
            
            // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
            const userRow = allRows.find((row, index) => {
                if (index === 0) return false; 
                const searchId = participantId.toLowerCase().replace(/\s/g, ''); 
                const nameMatch = (row[nameColumnIndex] || '').trim().toLowerCase().replace(/\s/g, '') === searchId;
                const phoneMatch = (row[phoneColumnIndex] || '').replace(/[^0-9]/g, '').trim() === participantId.replace(/[^0-9]/g, '').trim(); 
                return nameMatch || phoneMatch; 
            });

            
            if (userRow) {
                let personalInfoHTML = '';
                let questionsHTML = '';
                
                // ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶æ
                userRow.forEach((cell, index) => {
                    const sheetHeaderText = header[index] || '‡¶°‡ßá‡¶ü‡¶æ';
                    const displayHeaderText = headerMap[sheetHeaderText] || sheetHeaderText; 
                    const cellValue = cell || '‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø';
                    
                    // ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶§‡¶•‡ßç‡¶Ø (A ‡¶•‡ßá‡¶ï‡ßá F ‡¶ï‡¶≤‡¶æ‡¶Æ)
                    if (index <= 5) { 
                        let valueClass = '';
                        if (index === 2 || index === 3) { 
                            valueClass = 'highlight-value'; 
                        }
                        personalInfoHTML += `<li><strong>${displayHeaderText}:</strong> <span class="${valueClass}">${cellValue}</span></li>`;
                    } 
                    
                    // ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®-‡¶â‡¶§‡ßç‡¶§‡¶∞ (G ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ 6 ‡¶•‡ßá‡¶ï‡ßá)
                    else if (index >= 6) { 
                        
                        const questionIndex = index - 6;
                        const q = quizData.questions[questionIndex];
                        
                        if (q) {
                            const userAnswer = (cellValue || '').trim();
                            let optionsListHTML = '';

                            // ‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø array ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá
                            const correctAnswers = Array.isArray(q.correctAnswer) ? q.correctAnswer : [q.correctAnswer];
                            
                            // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶ï‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï?
                            const isUserAnswerCorrect = correctAnswers.includes(userAnswer);
                            
                            // ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶∞‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                            const resultClass = isUserAnswerCorrect ? 'correct-user-section' : 'incorrect-user-section';
                            
                            // ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ
                            let specialMessageHTML = '';
                            if (!isUserAnswerCorrect && correctAnswers.length > 1) {
                                // ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶•‡¶æ‡¶ï‡ßá
                                specialMessageHTML = `
                                    <p class="special-note">
                                        ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶®‡¶á ‡¶∏‡¶†‡¶ø‡¶ï ‡¶õ‡¶ø‡¶≤‡•§ 
                                        ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø‡¶ï‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø‡¶ï‡ßá‡¶ì ‡¶Ü‡¶™‡¶®‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶≠‡ßá‡¶¨‡ßá‡¶õ‡ßá‡¶®‡•§
                                    </p>
                                    <p><strong>‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤:</strong> <span class="correct-response-highlight">${correctAnswers.join(" / ")}</span></p>
                                `;
                            } else if (!isUserAnswerCorrect) {
                                // ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶•‡¶æ‡¶ï‡ßá
                                specialMessageHTML = `<p><strong>‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤:</strong> <span class="correct-response-highlight">${correctAnswers.join(" / ")}</span></p>`;
                            }
                            
                            // ‡¶Ö‡¶™‡¶∂‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø
                            q.options.forEach(option => {
                                let optionClass = '';
                                
                                // ‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞
                                const isCorrect = correctAnswers.includes(option);
                                
                                // ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®
                                if (isCorrect) {
                                    optionClass += ' correct'; // ‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü
                                }

                                const tickIcon = isCorrect ? '‚úÖ' : ''; // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá ‡¶ü‡¶ø‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶•‡¶æ‡¶ï‡¶¨‡ßá

                                optionsListHTML += `
                                    <li class="option-item ${optionClass}">
                                        ${option} ${tickIcon}
                                    </li>
                                `;
                            });
                            
                            // ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ HTML ‡¶§‡ßà‡¶∞‡¶ø 
                            questionsHTML += `
                                <div class="question-card">
                                    <div class="question-number">‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ${q.questionNumber}</div>
                                    <div class="question-text">üåô <strong>${q.questionText}</strong></div>
                                    <ul class="options-list">
                                        ${optionsListHTML}
                                    </ul>
                                    
                                    <div class="explanation-section ${resultClass}">
                                        <div class="explanation-content">
                                            <p>
                                                <strong>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞:</strong> <span class="user-response-highlight">${userAnswer}</span>
                                                ${isUserAnswerCorrect ? ' ‚úÖ' : ' ‚ùå'}
                                            </p>
                                            ${specialMessageHTML}
                                        </div>
                                    </div>
                                </div>
                            `;
                        }
                    }
                });

                // ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ HTML ‡¶§‡ßà‡¶∞‡¶ø
                let finalHTML = `
                    <div class="info-card">
                        <h3>üë§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</h3>
                        <ul class="personal-details-list">
                            ${personalInfoHTML}
                        </ul>
                    </div>
                    
                    <h3>‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶™‡¶§‡ßç‡¶∞</h3>
                    <div class="quiz-container">
                        ${questionsHTML}
                    </div>
                `;

                personalContainer.innerHTML = finalHTML;
            } else {
                personalContainer.innerHTML = "<p style='color: orange;'>‡¶è‡¶á ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§</p>";
            }
        })
        .catch(error => {
            console.error("Error loading personal data:", error);
            personalContainer.innerHTML = `<p style="color: red;">‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá API ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®: ${error.message}</p>`;
        });
}