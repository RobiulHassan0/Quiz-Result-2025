// ‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßã‡¶™‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
let quizData = null;

/**
 * ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç‡¶ï‡ßá ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ (Clean) ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡•§
 */
function cleanStringStrict(str) {
    if (typeof str !== 'string') return '';
    let cleaned = str.normalize("NFC");
    cleaned = cleaned.replace(/[\u0000-\u001F\u007F-\u009F]/g, ''); 
    cleaned = cleaned.replace(/\s/g, ''); 
    cleaned = cleaned.replace(/[\uFEFF\u200B]/g, '');
    return cleaned.trim(); 
}

// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßã
fetch('quizData.json')
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP Error! Status: ${response.status}. quizData.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`);
        }
        return response.json();
    })
    .then(data => {
        quizData = data;
        console.log("Quiz data loaded successfully.");
    })
    .catch(error => {
        console.error("Error loading quiz data:", error);
    });

// ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function fetchPersonalResult() {
    const personalContainer = document.getElementById('personal-data-container');
    const participantId = document.getElementById('participantId').value.trim();

    if (!participantId) {
        personalContainer.innerHTML = "<p style='color: red;'>‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø (‡¶á‡¶Æ‡ßá‡¶á‡¶≤/‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞) ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§</p>";
        return;
    }
    
    if (!quizData) {
        personalContainer.innerHTML = "<p style='color: orange;'>‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ñ‡¶®‡¶ì ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§</p>";
        return;
    }

    if (typeof SHEET_ID === 'undefined' || typeof API_KEY === 'undefined' || typeof SHEET_NAME === 'undefined') {
        personalContainer.innerHTML = '<p style="color:red;">Error: API Configuration (config.js) is missing or incorrectly loaded.</p>';
        return;
    }

    personalContainer.innerHTML = '<p>‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...</p>';

    const encodedRange = encodeURIComponent(SHEET_NAME) + '!' + API_RANGE;
    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${encodedRange}?key=${API_KEY}`;

    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP Error! Status: ${response.status}. ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API Key ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`);
            }
            return response.json();
        })
        .then(data => {
            const rows = data.values;
            if (!rows || rows.length <= 1) {
                personalContainer.innerHTML = "<p>‡¶∂‡¶ø‡¶ü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§</p>";
                return;
            }

            const cleanParticipantId = cleanStringStrict(participantId);

            const participantData = rows.slice(1).find(row => {
                const email = row[1] ? cleanStringStrict(row[1]) : '';
                const phoneOrId = row[3] ? cleanStringStrict(row[3]) : '';
                return email === cleanParticipantId || phoneOrId === cleanParticipantId;
            });

            if (participantData) {
                const infoKeys = [
                    { index: 1, label: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤" },
                    { index: 3, label: "‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞/‡¶Ü‡¶á‡¶°‡¶ø" },
                    { index: 4, label: "‡¶®‡¶æ‡¶Æ" },
                    { index: 5, label: "‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®" },
                    { index: 2, label: "‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞" }
                ];

                let personalInfoHTML = '';
                infoKeys.forEach(item => {
                    personalInfoHTML += `<li><strong>${item.label}:</strong> ${participantData[item.index] || '‡¶®‡ßá‡¶á'}</li>`;
                });

                let questionsHTML = '';
                
                participantData.forEach((cellValue, index) => {
                    if (index >= 6) { 
                        const questionIndex = index - 6;
                        const q = quizData.questions[questionIndex];
                        
                        if (q) {
                            const userAnswer = (cellValue || '').trim();
                            const correctAnswers = Array.isArray(q.correctAnswer) ? q.correctAnswer : [q.correctAnswer];
                            
                            const cleanedUserAnswer = cleanStringStrict(userAnswer);
                            const cleanedCorrectAnswers = correctAnswers.map(ans => cleanStringStrict(ans));
                            
                            const isUserAnswerCorrect = cleanedCorrectAnswers.includes(cleanedUserAnswer);

                            let optionsListHTML = '';
                            q.options.forEach(option => {
                                const cleanedOption = cleanStringStrict(option);
                                const isCorrect = cleanedCorrectAnswers.includes(cleanedOption);
                                const isUserSelection = (cleanedUserAnswer === cleanedOption);

                                let optionClass = '';
                                if (isCorrect) optionClass += ' correct'; // ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü
                                if (isUserSelection) optionClass += ' selected';

                                optionsListHTML += `
                                    <li class="option-item ${optionClass}">
                                        ${option}
                                    </li>
                                `;
                            });

                            // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° UI (‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶§‡ßã)
                            let userAnswerCard = '';
                            if (isUserAnswerCorrect) {
                                userAnswerCard = `
                                    <div class="user-answer-card correct-answer-card">
                                        <p><strong>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞:</strong> ${userAnswer} ‚úÖ</p>
                                    </div>
                                `;
                            } else {
                                userAnswerCard = `
                                    <div class="user-answer-card incorrect-answer-card">
                                        <p><strong>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞:</strong> ${userAnswer || '‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶®‡¶®‡¶ø'} ‚ùå</p>
                                        <p><strong>‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤:</strong> <span class="correct-response-highlight">${correctAnswers.join(" / ")}</span></p>
                                    </div>
                                `;
                            }

                            questionsHTML += `
                                <div class="question-card">
                                    <div class="question-number">‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ${q.questionNumber}</div>
                                    <div class="question-text"><strong>${q.questionText}</strong></div>
                                    
                                    <ul class="options-list">
                                        ${optionsListHTML}
                                    </ul>

                                    ${userAnswerCard}
                                </div>
                            `;
                        }
                    }
                });

                let finalHTML = `
                    <div class="info-card">
                        <h3>üë§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</h3>
                        <ul class="personal-details-list">
                            ${personalInfoHTML}
                        </ul>
                    </div>
                    
                    <h3>‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶™‡¶§‡ßç‡¶∞</h3>
                    <div class="quiz-container">
                        ${questionsHTML}
                    </div>
                `;

                personalContainer.innerHTML = finalHTML;
            } else {
                personalContainer.innerHTML = `<p style='color: orange;'>‡¶è‡¶á ‡¶Ü‡¶á‡¶°‡¶ø (<strong>${participantId}</strong>) ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§</p>`;
            }
        })
        .catch(error => {
            console.error("Error loading personal data:", error);
            personalContainer.innerHTML = `<p style="color: red;">‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá API ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®: ${error.message}</p>`;
        });
}
